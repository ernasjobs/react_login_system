{"version":3,"sources":["components/TextBox/TextBox.js","components/Buttons/UCPButton.js","components/Login/Login.js","components/images/UCPLogo.png","components/Header/Headers.js","App.js","reportWebVitals.js","index.js"],"names":["TextBox","backgroundColor","name","title","id","size","maxLength","minLength","placeholder","type","onChange","useState","window","innerWidth","isMobile","setIsMobile","useEffect","addEventListener","ismobile","className","htmlFor","defaultProps","UCPButton","to","buttonText","props","undefined","data-testid","onClick","initialState","username","password","usernameError","passwordError","LoginForm","handleChangeUsername","event","setState","target","value","handleChangePassword","handleSubmit","preventDefault","validate","console","log","state","validateEmail","ClearForm","email","test","this","Row","Col","React","Component","Headers","src","UCPLogo","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4db78ad5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './TextBox.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst TextBox = ({backgroundColor, name, title, size, id, maxLength, minLength, placeholder, type, onChange, ...props}) => {\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", () => {\r\n            const ismobile = window.innerWidth < 768;\r\n            if (ismobile !== isMobile) setIsMobile(ismobile);\r\n        }, false);\r\n    }, [isMobile]);\r\nreturn (\r\n    <div className={`${isMobile ? \"mobiletextbox\" : \"textbox\"}`}>\r\n        <label htmlFor={id}>{title}</label>\r\n        <input\r\n        name={name}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        id= {id}\r\n        maxLength = {maxLength}\r\n        minLength = {minLength}\r\n        type={type}\r\n        />\r\n    </div>\r\n);\r\n};\r\n\r\nTextBox.propTypes = {\r\n    backgroundColor: PropTypes.string,\r\n        /** What background colour to use */\r\n    title: PropTypes.string,\r\n        /** Input contents */\r\n    size: PropTypes.oneOf(['small', 'medium', 'large']),\r\n        /** How large should the input be? */\r\n    maxLength: PropTypes.number,\r\n    //Maximum input length\r\n    minLength: PropTypes.number,\r\n    //Minimum input length\r\n    placeholder: PropTypes.string,\r\n    type: PropTypes.oneOf(['text', 'password', 'email', 'tel', 'number', 'date'])\r\n};\r\n\r\nTextBox.defaultProps = {\r\n    backgroundColor: null,\r\n    size: 'small',\r\n    maxLength: 30,\r\n    minLength: 0,\r\n    placeholder: '',\r\n    type: \"text\"\r\n};\r\n\r\n/* Example Use\r\n\r\n<TextBox \r\n    title=\"First Name\" \r\n    placeholder=\"Enter your firstname\" \r\n    minLength=\"5\" \r\n    maxLength=\"30\" \r\n    id=\"input1\" \r\n    type=\"text\" \r\n/>\r\n\r\n*/\r\n\r\nexport default TextBox;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './UCPButton.css';\r\n\r\nexport const UCPButton = ({ to, className, buttonText, ...props}) => {\r\n  if(to === undefined)\r\n  {\r\n    to = \"/emptyLink\"\r\n  }   \r\n  return (\r\n          <button data-testid=\"ucpButton\"\r\n            type=\"button\"\r\n            className={className}\r\n            {...props}>\r\n            {buttonText}â€‹\r\n          </button>\r\n  );\r\n};\r\nUCPButton.propTypes = {\r\n    /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\nclassName:PropTypes.string,\r\n/**\r\n   * Optional click handler\r\n   */\r\nonClick:PropTypes.func,\r\n};\r\nUCPButton.defaultProps = {\r\n    size:'UCPDefault',\r\n    onClick:undefined\r\n};\r\nexport default UCPButton\r\n\r\n/* Example\r\n\r\n<UCPButton to=\"NAMEOFPAGE\" primary=true className=\"Large\" buttonText=\"Click Here\"/> \r\n\r\n*/\r\n\r\n\r\n","import React from 'react';\r\nimport { Container, Row , Col} from 'react-bootstrap';\r\nimport TextBox from '../TextBox/TextBox'\r\nimport UCPButton from '../Buttons/UCPButton';\r\nimport {isMobile} from 'react-device-detect';\r\nimport './Login.css';\r\n\r\nconst initialState = {\r\n    username: \"\",\r\n    password: \"\",\r\n    usernameError: \"\",\r\n    passwordError: \"\"\r\n    \r\n    \r\n};\r\n\r\nexport default class LoginForm extends React.Component {\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = initialState;\r\n   }\r\n    handleChangeUsername = event => {\r\n        this.setState({username: event.target.value });\r\n    };\r\n    handleChangePassword = event => {\r\n        this.setState({password: event.target.value });\r\n    };\r\n    \r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n        const isValid = this.validate();\r\n        if(isValid){\r\n            console.log(this.state);\r\n            this.setState(initialState);\r\n        }\r\n    };\r\n    validateEmail(email){\r\n        const pattern = /[a-zA-Z0-9]+[.]?([a-zA-Z0-9]+)?[@][a-z]{3,9}[.][a-z]{2,5}/;\r\n        const result = pattern.test(email);\r\n        if(result===true){\r\n          this.setState({\r\n            usernameError:false,\r\n            username:email,\r\n          })\r\n          return true;\r\n        } else{\r\n          this.setState({\r\n            usernameError:true,\r\n            \r\n          })\r\n          return false;\r\n        }\r\n      };\r\n\r\n    validate = () => {\r\n        let usernameError = \"\";\r\n        let passwordError = \"\";\r\n        if(!this.validateEmail(this.state.username))\r\n        {\r\n            usernameError = \"Invalid username!\"\r\n            \r\n        }\r\n        if(!this.state.password)\r\n        {\r\n            passwordError = \"Invalid password!\"   \r\n        }\r\n        if(usernameError || passwordError)\r\n        {\r\n            this.setState({usernameError, passwordError});\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    ClearForm = () => {\r\n     this.setState(initialState);\r\n    };\r\n    render() {\r\n        const className = isMobile ? \"MobileContainerStyle\" : \"ContainerStyle\";\r\n        return(\r\n            <div className={className}>\r\n                <form>\r\n                <Row>\r\n                    <Col>\r\n                    <div className=\"UserInfo\">\r\n                        <h2>Login</h2>\r\n                        <h3>{className}</h3>\r\n                    </div>\r\n                    </Col>\r\n                </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <div className=\"UserInfo\">\r\n                            <span>Username: </span>\r\n                            <TextBox\r\n                             type=\"text\" value={this.state.username} \r\n                             onChange={this.handleChangeUsername}  placeholder=\"Enter Your Username\"/> \r\n                        </div>\r\n                        <div className=\"InvalidInput\">\r\n                           <span>{this.state.usernameError}</span>\r\n                        </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                        <div className=\"UserInfo\">\r\n                            <span>Password: </span>\r\n                            <TextBox type=\"password\" value={this.state.password} \r\n                             onChange={this.handleChangePassword} placeholder=\"Enter Your Password\"/> \r\n                        </div>\r\n                        <div className=\"InvalidInput\">\r\n                           <span>{this.state.passwordError}</span>\r\n                        </div>\r\n                        </Col>\r\n                    </Row>\r\n                    <div className=\"UserInfo\">\r\n                        <UCPButton className=\"smallbutton\" buttonText=\"Submit\"\r\n                            type=\"submit\"\r\n                            onClick={this.handleSubmit}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n\r\n   ","export default __webpack_public_path__ + \"static/media/UCPLogo.02274764.png\";","import React from 'react';\r\nimport UCPLogo  from '../images/UCPLogo.png';\r\nimport './Headers.css';\r\nconst initialState = {\r\n    isMobile: false\r\n    \r\n};\r\nexport default class Headers extends React.Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = initialState;\r\n    }\r\n    componentDidMount() {\r\n        window.addEventListener('resize', () => {\r\n            this.setState({\r\n                isMobile: window.innerWidth < 768\r\n            });\r\n        }, true);\r\n    }\r\n    render(){\r\n        const className = this.state.isMobile ? \"MobileUCPLogoBlue\" : \"UCPLogoBlue\";\r\n        return (\r\n            <header>   \r\n                    <img data-testid=\"ucpLogoHeader\" src={UCPLogo} className={className} alt=\"UCP official logo\" />  \r\n            </header>\r\n        )\r\n    }\r\n};\r\n\r\n\r\n\r\n","import React from 'react';\nimport Login from './components/Login/Login';\nimport Headers from './components/Header/Headers'\nfunction App() {\n  return (\n    <div>\n      <Headers/>\n      <Login/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}